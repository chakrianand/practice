                   

                       				   PHARMETRADE CI-CD DEPLOY PIPELINE AND JENKINS FRONTEND


    1  ls
    
	2  pwd
    
	3  yum install fontconfig java-17-*
    
	4  java --version
    
	5  yum install git
    
	6 git -v 
	
    7  yum install maven
    
	8  mvn -v
    
	9  sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
   
   10  sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key
  
   11  yum install jenkins
  
   12  jenkins --version
   
   13  systemctl start jenkins
   
   14  systemctl enable jenkins
   
   15  systemctl status jenkins
   
   16  cat /var/lib/jenkins/secrets/initialAdminPassword
   
   17  yum install docker -y
   
   18  docker -v
   
   19   systemctl start docker
   
   20   systemctl enable docker
   
   21   systemctl status docker
   
   22  sudo usermod -aG docker jenkins
   
   23  ps aux | grep jenkins
   
   24  jenkins   1234  0.1  1.2 123456 12345 ?        Ssl  12:34   0:01 /usr/bin/java -jar ...
   
   25   sudo usermod -aG docker jenkins
   
   26  groups jenkins
   
   27  sudo -u jenkins docker run hello-world
   
   28  ls -la /var/run/docker.sock
   
   29  sudo usermod -aG docker jenkins
   
   30  sudo -u jenkins docker run hello-world
   
   31  ls -la /var/run/docker.sock
   
   32  sudo chown root:docker /var/run/docker.sock
   
   33  sudo chmod 660 /var/run/docker.sock
   
   34  ping -c 4 google.com
   
   35  curl -I https://registry.npmjs.org/
   
   36  ll
   
   37  docker ps
   
   38  docker ps -a
   
   39  docker login
   
   40  sudo usermod -aG docker jenkins
   
   41  sudo groupadd docker
   
   42  sudo systemctl restart jenkins
   
   43  docker ps
   
   44  ls -l /var/run/docker.sock
   
   45  srw-rw---- 1 root docker 0 Nov  9 10:00 /var/run/docker.sock
   
   46  sudo chmod 660 /var/run/docker.sock
   
   47  sudo chown root:docker /var/run/docker.sock
   
   
   
   pipeline script
   
   pipeline {
    agent any
        environment {
        registry = "chakridockerhub/chakri-cicd"       (docker hub registryname evveli) (dockerhub login kavali)
        registryCredential = 'docker'                   (docker ID evveli)
        dockerImage = ''
        // Node.js options (if needed for your application)
        NODE_OPTIONS = '--max-old-space-size=4096'
    }

    stages {
        // Stage 0: Cleanup Workspace
        stage('Cleanup Workspace') {
            steps {
                // Cleans the workspace to ensure a fresh start
                cleanWs()
            }
        }
        
        // Stage 1: Cloning Git                        (git pipeline syntex generate cheyali)
        stage('GitClone') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'git', url: 'https://github.com/chakrianand/Pharmetrade-1.git']])
            }
        }
        
        // Stage 2: Set Docker Context
        stage('Set Docker Context') {
            steps {
                script {
                    // List available Docker contexts
                    sh 'docker context ls'
                    
                    // Switch to default context
                    sh 'docker context use default'
                }
            }
        }
        
        // Stage 3: Building the Docker image
        stage('Docker Build') {
            steps {
                script {
                    // Build the Docker image with the BUILD_NUMBER as the tag
                    dockerImage = docker.build("${registry}:${env.BUILD_NUMBER}")
                }
            }
        }
        
        // Stage 4: Push Image
        stage('Push Image') {
            steps {
                script {
                    // Push the Docker image to Docker Hub
                    docker.withRegistry('https://index.docker.io/v1/', registryCredential) {
                       // Pushes the image with the 'latest' tag
                    }
                }
            }
        }
        
        // Stage 5: Run Image
        stage('Run Image') {
            steps {
                script {
                    // Remove existing container if it exists to prevent naming conflicts
                    sh """
                        docker rm -f sample-project || echo 'No existing container to remove'
                    """
                    
                    // Run the new Docker image with the correct tag in detached mode
                    sh """
                        docker run -d -p 5173:5173 --name sample-project ${registry}:${env.BUILD_NUMBER}
                    """
                }
            }
        }
        
        /*
        // Optional Stage 6: Cleanup Docker Image
        // Uncomment if you wish to remove the Docker image after deployment
        stage('Cleanup Docker Image') {
            steps {
                script {
                    dockerImage.remove()
                }
            }
        }
        */
    }
    
    post {
        success {
            echo 'Docker image built, pushed, and deployed successfully!'
        }
        failure {
            echo 'Pipeline failed. Docker login, push, or run may have encountered an error.'
        }
    }
}
   
